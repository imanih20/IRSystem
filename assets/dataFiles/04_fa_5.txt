سیستم عامل یا سامانهٔ عامل نرم‌افزار سیستمی‌ای است که مدیریت منابع رایانه را به عهده گرفته و بستری را فراهم می‌سازد که نرم‌افزار کاربردی اجرا شده و از خدمات آن استفاده کنند. سیستم‌عامل جزء ضروری‌ترین نرم‌افزارهای یک سیستم رایانه‌ای است. سیستم‌عامل خدماتی به برنامه‌های کاربردی و کاربر ارائه می‌دهد. برنامه‌های کاربردی یا از طریق واسط‌های برنامه‌نویسی کاربردی یا از طرق فراخوانی‌های سیستم به این خدمات دسترسی دارند. با فراخوانی این واسط‌ها، برنامه‌های کاربردی می‌توانند سرویسی را از سیستم‌عامل درخواست کنند، پارامترها را انتقال دهند، و پاسخ عملیات را دریافت کنند. ممکن است کاربران با بعضی انواع واسط کاربری نرم‌افزار مثل واسط خط فرمان یک واسط گرافیکی کاربر با سیستم‌عامل تعامل کنند. برای رایانه‌های دستی و رومیزی، عموماً واسط کاربری به عنوان بخشی از سیستم‌عامل در نظر گرفته می‌شود. در سیستم‌های بزرگ و چند کاربره مثل یونیکس و سیستم‌های شبیه یونیکس، واسط کاربری معمولاً به عنوان یک برنامهٔ کاربردی که خارج از سیستم‌عامل اجرا می‌شود پیاده‌سازی می‌شود. نمونه‌هایی از محبوب‌ترین سیستم‌عامل‌های نوین شامل: اندروید، ویندوز، آی او اس، مک اواس، لینوکس، کروم اواس، ویندوز فون، بی‌اس‌دی، کیوان‌اکس، و زد/اواس می‌باشند.
یک سیستم تک‌کاره تنها می‌تواند یک برنامه را به‌طور همزمان اجرا کند، در حالی‌که یک سیستم عامل چندمنظوره اجازه می‌دهد تا بیش از یک برنامه به‌طور همزمان اجرا شود. این با به اشتراک‌گذاری زمان حاصل می‌شود، که در آن زمان پردازندهٔ موجود بین چندین فرایند تقسیم می‌شود. این فرایندها هر یک به‌طور مکرر در برش‌های زمانی توسط یک زیر سیستم برنامه‌ریزی کار سیستم عامل قطع می‌شوند. چند وظیفه‌ای ممکن است در انواع پیشگیرانه و تعاونی مشخص شود. در چند وظیفه‌ای پیشگیرانه، سیستم عامل زمان CPU را قطع می‌کند و شکافی را به هر یک از برنامه‌ها اختصاص می‌دهد. سیستم عامل‌های یونیکس مانند، مانند Solaris, Linux و همچنین غیر Unix مانند مانند AmigaOS، از وظیفه‌های پیشگویی‌کننده پشتیبانی می‌کنند. چند وظیفهٔ تعاونی با تکیه بر هر فرایند بدست می‌آید تا زمان دیگری را برای سایر فرایندها به صورت تعریف‌شده فراهم کند. نسخه‌های ۱۶ بیتی مایکروسافت ویندوز از چندکاره تعاونی استفاده می‌کردند. نسخه‌های ۳۲ بیتی ویندوز NT و Win9x از وظایف پیشگیرانه استفاده می‌کنند.
سیستم عامل‌های یک‌کاربره امکان تمایز کاربران را ندارند، اما ممکن است چندین برنامه را به صورت همزمان اجرا کنند. یک سیستم عامل چند کاربره مفهوم اصلی کار چند منظوره را با امکاناتی فراهم می‌کند که فرایندها و منابع را شناسایی می‌کنند، از جمله فضای دیسک، متعلق به چندین کاربر، و سیستم به چندین کاربر اجازه می‌دهد تا همزمان با سیستم ارتباط برقرار کنند. برنامه‌های زمانبندی سیستم عامل برای استفاده کارآمد از سیستم برنامه‌ریزی کرده و ممکن است شامل نرم‌افزار حسابداری برای اختصاص هزینهٔ زمان پردازنده، ذخیرهٔ انبوه، چاپ و سایر منابع برای چندین کاربر نیز باشد. در سیستم عامل‌های شبه‌یونیکس یک حالت تک‌کاربره در هستهٔ پشتیبان وجود دارد که برای وقتی است که دیگر هسته‌ها با مشکل مواجه می‌شوند و نیاز به تعمیر دارند یا رمز کاربر ریشه را بدون دانستن آن بخواهیم تغییر دهیم.
سیستم عامل توزیع شده گروهی از رایانه‌های مجزا و شبکه‌ای را مدیریت می‌کند و باعث می‌شود که آن‌ها یک کامپیوتر واحد باشند، زیرا همهٔ محاسبات توزیع می‌شوند .
در زمینهٔ محاسبات توزیع شده و ابری یک سیستم عامل، قالب‌بندی به ایجاد یک تصویر واحد مجازی به عنوان یک سیستم عامل مهمان اشاره دارد و سپس آن را به عنوان ابزاری برای چندین ماشین مجازی در حال اجرا ذخیره می‌کند. این روش هم در مجازی‌سازی و هم در مدیریت محاسبات ابری مورد استفاده قرار می‌گیرد و در انبارهای بزرگ سرور رایج است.
سیستم عامل‌های جاسازی‌شده برای استفاده در سیستم‌های رایانه‌ای جاسازی‌شده طراحی شده‌اند. آن‌ها به گونه‌ای طراحی شده‌اند که در دستگاه‌های کوچک با استقلال کمتری کار کنند . آن‌ها از نظر طراحی بسیار جمع و جور و بسیار کارآمد هستند و قادر به استفاده از منابع محدود هستند. Windows CE و Minix 3 نمونه‌هایی از سیستم عامل‌های تعبیه‌شده هستند.
سیستم‌های بی‌درنگ یا سیستم عامل در زمان واقعی یک سیستم عامل است که پردازش رویدادها یا داده‌ها توسط یک لحظهٔ خاص در زمان را تضمین می‌کند. یک سیستم عامل در زمان واقعی ممکن است تک‌کاره یا چندکاره باشد، اما هنگام کار چند وظیفه‌ای، از الگوریتم‌های برنامه‌ریزی تخصصی استفاده می‌کند تا ماهیت قطعی رفتار حاصل شود. چنین سیستمی محور براساس اولویت‌ها یا رویدادهای خارجی بین وظایف تغییر می‌کند، در حالی که سیستم‌های عامل مشترک با زمان وظایف را بر اساس وقفه ساعت تغییر می‌دهند.
هر سیستم عامل کتابخانه‌ای دارد که در آن رویه‌های سیستم عامل برای فراخوانی توسط برنامه‌های دیگر وجود دارند. برای مثال، برای نوشتن فایلی بر دیسک نیاز به فراخوانی رویهٔ خاصی در سیستم عامل است. یا در سیستم عامل‌های شبه‌یونیکس از رویهٔ سیستمی Fork برای ساختن فرآیندهای جدید استفاده می‌شود. معمولاً کتابخانهٔ سیستم عامل‌های شبه‌یونیکس با زبان برنامه‌نویسی سی نوشته شده‌اند.
رایانه‌های اولیه برای انجام یک سری از کارهای تک مانند ماشین حساب ساخته شدند. ویژگی‌های اصلی سیستم عامل در دههٔ ۵۰ توسعه یافت، مانند توابع مانیتور ساکن که به‌طور خودکار می‌توانند برنامه‌های مختلف را به صورت متوالی اجرا کنند تا پردازش سریع شود. سیستم‌های عامل تا اوایل دههٔ ۱۹۶۰ به شکل‌های مدرن و پیچیده‌تر وجود نداشتند. ویژگی‌های سخت‌افزاری اضافه شده‌است که امکان استفاده از کتابخانه‌های زمان اجرا، وقفه‌ها و پردازش موازی را فراهم می‌آورد. هنگامی که رایانه‌های شخصی در دههٔ ۱۹۸۰ رایج شدند، سیستم‌های عامل برای آن‌ها شبیه به رایانه‌های بزرگ‌تر مورد استفاده قرار گرفت.
در دههٔ ۱۹۴۰، نخستین سیستم‌های دیجیتال الکترونیکی هیچ سیستم عاملی نداشتند. سیستم‌های الکترونیکی آن زمان در ردیف‌های سوئیچ‌های مکانیکی یا توسط سیم‌های بلوز روی پلاگین‌ها برنامه‌ریزی می‌شدند. این‌ها سیستم‌های ویژه‌ای بود که به عنوان مثال جدول‌های بالستیک را برای ارتش ایجاد می‌کردند یا چاپ چک‌های حقوق و دستمزد از داده‌های روی کارت‌های کاغذ سوراخ‌دار را کنترل می‌کردند. پس از اختراع رایانه‌های قابل برنامه‌ریزی عمومی، زبان‌های دستگاه .
در اوایل دههٔ ۵۰، یک رایانه می‌توانست همزمان فقط یک برنامه را اجرا کند. هر کاربر تنها برای مدت محدودی از رایانه استفاده می‌کرد و با برنامه و داده‌های خود در کارت‌های کاغذ سوراخ‌دار یا نوار پانچ‌شده در یک زمان مشخص قرار می‌گرفت. برنامه وارد دستگاه می‌شود و دستگاه تا زمان تکمیل یا خراب شدن برنامه کار می‌کند. به‌طور کلی برنامه‌ها می‌توانند از طریق پنل جلویی با استفاده از کلیدهای جابجایی و چراغ‌های پانل اشکال‌زدایی شوند. گفته می‌شود که آلن تورینگ در اوایل ماشین منچستر مارک ۱ استاد این کار بوده‌است و او پیش‌تر برداشت اولیهٔ یک سیستم عامل را از اصول دستگاه جهانی تورینگ به‌دست می‌آورد.
ماشین‌های بعدی با کتابخانه‌هایی از برنامه‌ها همراه شدند که برای کمک به عملیاتی از قبیل ورودی و خروجی و گردآوری  بود که از آن نوارها با گیره‌های رنگی مختلف برای نشان دادن اولویت شغل آویزان می‌شد.
سرپرست اطلس پیشرفت خوبی داشت. با معرفی اطلس منچستر در سال ۱۹۶۲، از نظر بسیاری نخستین سیستم عامل مدرن قابل تشخیص است. برینچ هانسن آن را «مهم‌ترین پیشرفت در تاریخ سیستم‌های عامل» توصیف کرد.
در دههٔ ۱۹۵۰، بسیاری از ویژگی‌های اصلی در زمینهٔ سیستم عامل‌های رایانه‌های اصلی از جمله پردازش دسته‌ای، قطع ورودی و خروجی، بافر، چند کاره، غلط‌گیری، کتابخانه‌های زمان اجرا، لینک بارگذاری و برنامه‌هایی برای مرتب‌سازی پیشینه‌هآ در پرونده‌ها پیشگام شدند. این ویژگی‌ها به جای یک سیستم عامل جداگانه که توسط همهٔ برنامه‌ها استفاده می‌شود، در گزینهٔ برنامه‌نویسان برنامه گنجانده شده یا شامل نشده‌اند. در سال ۱۹۵۹، سیستم عامل SHARE به‌عنوان ابزاری یکپارچه برای IBM 704 و بعداً در میان اصلی‌های ۷۰۹ و ۷۰۹۰ منتشر شد، اگرچه به سرعت توسط IBSYS / IBJOB در ۷۰۹، ۷۰۹۰ و ۷۰۹۴ ارسال شد.
در دههٔ ۱۹۶۰، سیستم عامل IBM / OS IBM مفهوم سیستم عامل منفرد را دربرداشت که تمام خط تولید را شامل می‌شد، که برای موفقیت دستگاه‌های System / 360 بسیار مهم بود. سیستم‌های عامل اصلی کنونی IBM از فرزندان دور این سیستم اصلی هستند و ماشین‌های مدرن با برنامه‌های نوشته‌شده برای OS / 360 سازگار با عقب هستند.
ریز کامپیوترها برای نخستین بار از ظرفیت یا نیاز به سیستم عامل‌های پیچیده‌ای که برای اصلی‌ها و مینی‌ها ساخته شده بودند، نداشتند. سیستم عامل‌های حداقلی توسعه یافته بودند، که اغلب از ROM بارگذاری می‌شوند و به عنوان مانیتور معروف هستند. یکی از سیستم عامل‌های قابل توجه درایو اولیه، CP / M بود که در بسیاری از میکرو کامپیوترهای اولیه پشتیبانی شد و از نزدیک توسط MS-DOS مایکروسافت تقلید شد، که به عنوان سیستم عامل انتخاب شده برای IBM PC محبوبیت زیادی پیدا کرد  به سیستم عامل مک معرفی کند.
معرفی تراشهٔ CPU Intel 80386 CPU در اکتبر ۱۹۸۵، با قابلیت معماری ۳۲ بیتی و قابلیت صفحه‌بندی، امکان رایانه‌های شخصی را برای اجرای سیستم عامل‌های چند وظیفه‌ای مانند رایانه‌های مینی‌رایانه و مجهز به سیستم‌های پیشین فراهم کرد. مایکروسافت با استخدام دیو کاتلر، که سیستم عامل VMS را برای شرکت تجهیزات دیجیتال توسعه داده بود، به این پیشرفت پاسخ داد. او توسعهٔ سیستم عامل Windows NT را هدایت می‌کند، که همچنان به عنوان پایه‌ای برای خط سیستم عامل مایکروسافت عمل می‌کند. استیو جابز، یکی از بنیانگذاران شرکت اپل، NeXT Computer Inc را راه‌اندازی کرد که سیستم عامل NEXTSTEP را توسعه داد. NEXTSTEP بعداً توسط Apple Inc. به‌دست می‌آید و همراه با کد FreeBSD به عنوان هستهٔ Mac OS X  استفاده می‌شود.
پروژهٔ GNU توسط ریچارد استالمن فعال و برنامه‌نویس با هدف ایجاد جایگزینی کامل نرم‌افزار رایگان در سیستم عامل اختصاصی UNIX آغاز شد. در حالی‌که این پروژه در کپی کردن قابلیت‌های بخش‌های مختلف UNIX بسیار موفق بود، توسعهٔ هستهٔ GNU Hurd بی‌ثمر بود. در سال ۱۹۹۱، لینوس توروالدز، دانشجوی علوم کامپیوتر رایانه، با همکاری داوطلبانی که از طریق اینترنت همکاری می‌کنند، نخستین نسخه از هستهٔ لینوکس را منتشر کرد. به زودی با مؤلفه‌های فضای کاربر کاربر و نرم‌افزار سیستم ادغام شد تا یک سیستم عامل کامل ایجاد شود. از آن زمان به بعد، ترکیب دو مؤلفهٔ اصلی معمولاً توسط صنعت نرم‌افزار به سادگی به «لینوکس» گفته می‌شود، یک کنوانسیون نامگذاری که استالمن و بنیاد نرم‌افزار آزاد با آن مخالف هستند و ترجیح می‌دهند نام GNU / Linux را ترجیح دهند. هستهٔ سیستم عامل توزیع نرم‌افزار برکلی، معروف به BSD، مشتق‌شده از هستهٔ سیستم عامل UNIX، که از دههٔ ۱۹۷۰ توسط دانشگاه کالیفرنیا، برکلی توزیع شده‌است. آخرین نسخهٔ آن BSD ۴٫۴ در سال ۱۹۹۵ بود که بعد از آن دیگر نسخه‌ای نداد و بنابرین این یک پروژه متوقف شده می اشد. اما توزیع‌هایی مانند FreeBSD, OpenBSD, NetBSD همچنان پایدار هستند.
اجزای سیستم عامل همه به منظور ایجاد بخش‌های مختلف یک کامپیوتر در کنار هم وجود دارند. تمام نرم‌افزارهای کاربر برای استفاده از هر کدام از سخت‌افزارها، چه از طریق ماوس و کیبورد و چه به عنوان یک کامپوننت اینترنت، باید از طریق سیستم عامل عبور کنند.
هسته در اصل مغز سیستم عامل است. هسته وظیفهٔ مدیریت سخت‌افزار و نرم‌افزار را دارد. در واقع هسته یک سیستم عامل باید پروسه‌ها را ترتیب‌دهی کند، به هر پروسه شناسه‌ای دهد و اجرا کند و تا اتمام پروسه آن را مدیریت کند ، توابعی برای فراخوانی برای دسترسی با حالت هسته داشته باشد و به‌طور کلی باید مانند مغز سیستم عامل عمل کند. هسته باید میزان استفاده از واحد پردازندهٔ مرکزی یا CPU برای هر پروسه را کنترل کند، هر پروسه‌ای که اولویت بیشتری داشته باشد، میزان استفاده از پردازنده را بر آن پروسه بالا می‌برد، همین‌طور وظیفهٔ نوشتن یا خواندن فایل‌ها را دارد و وظیفهٔ اجرای دستورات را دارد. در اکثر سیستم عامل‌های شبه‌یونیکس، کرنل در بوت لودر با یک سری پارامترها اجرا می‌شود و پروسهٔ init را اجرا می‌کند. کرنل باید تمامی ورودی‌ها و خروجی‌ها را بخواند. بخش مهمی از کرنل در بخش محافظت‌شده از رم لود می‌شود. به‌طور کلی‌تر هسته وظیفهٔ مدیریت سخت‌افزار و نرم‌افزار را دارد.
سیستم عامل واسط بین یک برنامهٔ کاربردی و سخت‌افزار رایانه را فراهم می‌کند، به گونه‌ای که یک برنامهٔ کاربردی می‌تواند تنها با رعایت قوانین و رویه‌های برنامه‌ریزی شده در سیستم عامل با سخت‌افزار ارتباط برقرار کند. سیستم عامل همچنین مجموعه‌ای از خدمات است که توسعه و اجرای برنامه‌های کاربردی را ساده می‌کند. اجرای یک برنامهٔ کاربردی شامل ایجاد یک فرایند توسط هستهٔ سیستم عامل است که فضای حافظه و منابع دیگر را اختصاص می‌دهد، اولویت این فرایند را در سیستم‌های چندکاره ایجاد می‌کند، کدهای باینری برنامه را در حافظه بارگذاری می‌کند و اجرای برنامهٔ کاربردی را آغاز می‌کند. سپس با کاربر و دستگاه‌های سخت‌افزاری ارتباط برقرار می‌کند.
وقفه‌ها برای سیستم عامل‌ها از اهمیت ویژه‌ای برخوردار است، زیرا آن‌ها یک روش کارآمد برای سیستم عامل برای تعامل و واکنش به محیط آن فراهم می‌کنند. گزینهٔ جایگزین، داشتن سیستم عامل منابع مختلف ورودی برای رویدادها  یافت اما در سیستم‌های مدرن با پشته‌های بزرگ غیرمعمول است. برنامه‌نویسی مبتنی بر قطع به‌طور مستقیم توسط اکثر CPUهای مدرن پشتیبانی می‌شود. وقفه‌ها راهی را برای صرفه‌جویی در خودکار ثبت زمینه‌های ثبت محلی و اجرای کد ویژه در پاسخ به وقایع، به رایانه می‌دهد. حتی رایانه‌های بسیار اساسی از قطع سخت‌افزار پشتیبانی می‌کنند و به برنامه‌نویس اجازه می‌دهند کدی را که ممکن است هنگام وقوع آن اجرا شود، مشخص کند.
هنگامی که یک وقفه دریافت شد، سخت‌افزار رایانه به‌طور خودکار هر برنامه‌ای را که در حال اجراست، به حالت تعلیق درمی‌آورد، وضعیت خود را ذخیره می‌کند، و کد رایانه‌ای را که پیش‌تر با وقفه در ارتباط بود اجرا می‌کند. این مشابه با قرار دادن یک نشانک در یک کتاب در پاسخ به تماس تلفنی است. در سیستم عامل‌های مدرن، وقفه‌ها توسط هستهٔ سیستم عامل انجام می‌شود. وقفه‌ها ممکن است از سخت‌افزار رایانه یا برنامه در حال اجرا باشد.
هنگامی که یک دستگاه سخت‌افزاری باعث ایجاد وقفه می‌شود، هستهٔ سیستم عامل تصمیم می‌گیرد که چگونه با این رویداد معمولاً با اجرای کد پردازشی مقابله کند. میزان کد در حال اجرا بستگی به اولویت وقفه دارد . پردازش قطع سخت‌افزار کاری است که معمولاً به نرم‌افزاری به نام درایور دستگاه منتقل می‌شود که ممکن است بخشی از هستهٔ سیستم عامل، بخشی از برنامهٔ دیگر یا هر دو باشد. ممکن است درایورهای دستگاه با استفاده از روش‌های مختلف، اطلاعات را به یک برنامه در حال اجرا منتقل کنند.
یک برنامه همچنین ممکن است باعث ایجاد وقفه در سیستم عامل شود. برای مثال اگر یک برنامه بخواهد به سخت‌افزار دسترسی داشته باشد، ممکن است هستهٔ سیستم عامل را قطع کند و این باعث می‌شود کنترل به هسته منتقل شود. سپس هسته درخواست را پردازش می‌کند. اگر برنامه‌ای بخواهد منابع اضافی  مانند حافظه باشد، باعث جلب توجه هسته می‌شود.
در این حالت کاربر کنونی تنها اجازهٔ خواندن فایل را دارد. معمولاً در سیستم‌های نجات از اطلاعات از سامانهٔ فایل‌بندی فقط خواندنی استفاده می‌شود.
هر برنامه در حال اجرا یک پروسه است، چه در پیش‌زمینه چه در پس‌زمینه، هستهٔ سیستم عامل وظیفهٔ مدیریت پروسه‌ها را دارد. هستهٔ سیستم عامل به هر پروسه یک شناسهٔ پروسه یا PID می‌دهد، منابع و حافظهٔ پروسه را کنترل می‌کند و آن‌ها را به ترتیب خاصی اجرا می‌کند تا زمانی که پروسه به پایان برسد و پروسهٔ والد  به پایان رسیدن آن را تأیید کند یا مطلع شود. هر پروسه یک برنامه است، هر برنامه به مقداری حافظه و منابعی نیاز دارد، هسته وظیفهٔ این را دارد تا همهٔ این‌ها را تهیه کند، و در انتهای پروسه حافظه و منابع گرفته یا اشغال شده را خالی یا آزاد کند. در سیستم عامل‌های شبه‌یونیکس پروسهٔ مادر یا init که در هنگام راه‌اندازی سیستم عامل اجرا می‌شود نیز مادر همهٔ پروسه‌هاست؛ یعنی اگر پروسهٔ مادر از بین برود همهٔ پروسه‌های دیگر نیز از بین می‌روند.
هستهٔ سیستم عامل با قابلیت حافظهٔ مجازی وظیفهٔ تأمین امنیت پروسه‌های اشغال‌شده در مموری را دارد، یعنی باید از دسترسی برنامه‌ها یا پروسه‌ها به منابع و حافظهٔ اشغال‌شده توسط پروسه‌های دیگر جلوگیری کند. به‌طور کلی اگر سیستم عامل قابلیت حافظهٔ مجازی داشته باشد، فضایی برای آدرس‌های پروسه‌ها و برنامه‌های در حال اجرا که آدرس مجازی نامیده می‌شود تا برنامهٔ دیگری نتواند به آن بخش از حافظه دسترسی یابد. هستهٔ سیستم عامل وظیفهٔ مدیریت و گرفتن آدرس‌های مجازی را دارد.
هستهٔ سیستم عامل از هرگونه دسترسی به نوشتن یا خواندن در دیسک جلوگیری می‌کند، بنابرین برای نوشتن فایلی  تنها راه موجود استفاده از فراخوانی سیستم یا فراخوانی توابع سیستم هست، این به این معنی است تنها با فراخواندن توابعی که در هستهٔ سیستم عامل تعریف شده‌اند می‌توان روی دیسک نوشت یا فایلی را خواند. هرگونه خواندن یا نوشتن فایلی در حلقهٔ ۳ یا فضای کاربری توسط هستهٔ سیستم عامل جلوگیری می‌شود، دسترسی به دیسک تنها در حالت کرنل یا هسته ممکن است.
هر سیستم عامل سامانه  فایل‌بندی پیش‌فرضی دارد، مثلاً ویندوز از سامانهٔ فایل‌بندی NTFS و لینوکس از EXT4 به‌طور پیش‌فرض استفاده می‌کنند.
در سیستم عامل‌های شبه‌یونیکس init یا اولیه‌ساز، پروسه‌ها و سرویس‌هایی که سیستم عامل برای راه‌اندازی به آن‌ها نیاز دارد را اجرا می‌کند مثلاً در لینوکس، برای بالا آمدن دسکتاپ گنوم نیازمند اجرای سرویس gdm است، بنابرین در انتها سرویس gdm را اجرا می‌کند. این پروسه به عنوان پروسهٔ مادر یا مادر همهٔ پروسه‌های سیستم نیز شناخته می‌شود که معمولاً شناسهٔ پروسهٔ ۱ را به همراه دارد. همچنین این پروسه تا خاموش‌شدن سیستم همچنان فعال است. در سیستم عامل‌های لینوکس معمولاً از سیستم راه‌انداز SystemD استفاده می‌شود.
هستهٔ سیستم عامل وظیفهٔ جلوگیری از دسترسی هرگونه برنامه‌ای به سخت‌افزار را دارد. برای همین اصطلاحاً می‌گویند هستهٔ سیستم عامل در حلقهٔ ۰ وجود دارد، این امنیت سیستم را تا جایی فراهم می‌کند که برنامهٔ مخربی نتواند به سخت‌افزار صدمه‌ای بزند. تنها راه استفاده از برخی دسترسی‌ها به سخت‌افزار نظیر نوشتن فایل بر هارد دیسک، نیازمند فراخوانی سیستمی یا فراخوانی توابع سیستمی است.
رابط کاربری یک سیستم عامل می‌تواند به دو صورت رابط کاربری گرافیکی  است و در سیستم عامل‌هایی با قابلیت GUI به صورت گرافیکی و راحت‌تر است.
سیستم‌عامل دو کار عمده انجام می‌دهد:
به‌طور کلی، وظایف سیستم‌عامل شامل موارد زیر است:
بین رایانه‌های شخصی در سال‌های اخیر رقابت بیشتر بین سیستم‌عامل‌های اندروید، مایکروسافت ویندوز، آی اواس، مک اواس و لینوکس جریان دارد که آماری که در ماه سپتامبر ۲۰۱۹ توسط وبگاه W3Counter به ثبت رسیده حاکی از آن است که هم‌اکنون بیش از ۱۵ درصد کاربران اینترنت از سیستم‌عامل ویندوز ۱۰ استفاده می‌کنند.
آمار موجود که مربوط به فوریهٔ ۲۰۲۰ می‌باشد به شرح زیر است:
از سیستم‌عامل‌های مشهور رایانه‌های شخصی می‌توان به اسامی زیر اشاره کرد:
همچنین از سیستم‌عامل‌های موجود روی گوشی‌های تلفن همراه نسل جدید می‌توان به نام‌های زیر اشاره کرد:
